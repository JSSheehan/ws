{
  
    
        "post0": {
            "title": "Explaining Dylan Bundy’s 2020 Dominance and 2021 Struggles",
            "content": ". In 2020 Dylan Bundy had a career year pitching to a 3.06 xERA with a 27% Strikeout rate and 6.4% walk rate - all career bests. Almost every statistic pointed to 2020 being his best season as shown in Table 1 below. It appeared that the once highly touted fourth overall draft pick had finally tapped back into the potential he showed before Tommy John surgery in 2013 delayed his stardom. But in 2021, these same statistics are now almost all career worst. In the analysis below I look into what changed between 2019, 2020, and 2021, and how Bundy can get back on track. . Table 1: Statistics by Season . Note: The red highlighting notes the worst year for each respective category while green represents the best . One change Bundy makes each year is his pitch mix. Bundy added a slider in 2017 and since has used a five-pitch mix. His usage of each of these pitches are outlined in Graphic 1 below. . Graphic 1: Bundy Pitch % by Season . As you can see from Graphic 1, Bundy has relied less on his four-seamer ever since 2018 when he threw it nearly half the time. Table 2 below highlights these percentages for 2019 and 2020 showing his four-seam usage dropped down to only 33.6% in 2020. . Table 2: Bundy Pitch Usage 2019 vs 2020 . Note: The red arrow highlights a decrease in usage while the green arrows indicate increases . By cutting down his four-seam usage Bundy was able to rely more on his off-speed pitches which tended to perform better than his four-seam or sinker. Looking in Table 3 below, which breaks up each of the 2019 statistics from Table 1 by pitch type, his four-seam or sinker (his only pitches thrown over 90 mph) were his worst performing pitches in nearly every category. . Table 3: 2019 Statistics by Pitch Type . Note: The red cells highlight the worst performing pitch in each category . The success of each pitch carried over similarly into 2020 as Bundy continued to dominate hitters with his off-speed pitches while his four-seam and sinker were again his worst performing pitches as shown in Table 4. Since Bundy threw his off-speed pitches more than ever before, his overall numbers were better than they’ve ever been. . Table 4: 2020 Statistics by Pitch Type . Note: The red cells highlight the worst performing pitch in each category . Coming off his 2020 success there were high standards for Bundy this season, but he hasn’t lived up to them. In 2021 his numbers have been the worst of career, as discussed earlier. Looking at his pitch usage in Table 5, in 2021 Bundy has continued to use his four-seamer at around the same rate as 2020 but is relying heavily on his sinker and less on his change-up. As a result, he’s using his hard stuff nearly 10% more than he did in 2020. . Table 5: Bundy Pitch Usage 2020 vs 2021 . Note: The red arrows highlight a decrease in usage while the green indicate an increase . Again, it’s held true that his sinker and four-seamer have been less effective in 2021, and he is now throwing them even more combined than in 2019. These pitches have contributed to more hits, less strikeouts, and more walks as shown in Table 6. . Table 6: 2021 Statistics by Pitch Type . Note: The red cells highlight the worst performing pitch in each category . Increasing the usage of his sinker most likely is a contributing factor of Bundy’s 2021 struggles. But when digging into the numbers further we can see that even though he hasn’t increased how often he used his four-seam much, he’s changed when he used it. In 2020 Bundy started throwing more first pitch curveballs as shown in Graphic 2 below. By not relying on his four-seamer so often he not only was throwing a more effective pitch with the curveball but was throwing off a hitters timing by mixing up speeds. His four-seam averaged over 90 mph while his curveball averaged only 73.5 mph. This meant a player couldn’t just sit on his four-seamer as easily as they could in 2019 when he was throwing it around 55% of the time on his first pitch. . So far in 2021 Bundy is continuing to use his four-seamer at a similar overall rate to 2020 but he’s reverted to throwing mostly hard stuff to start hitters off. He’s increased his combined four-seamer and sinker usage back over 50% in both 0-0 and 0-1 counts. This has led to a 0.645 slugging percentage in 0-0 counts and 0.789 in 0-1 counts, as opposed to a 0.267 and 0.500 respectively in 2020 as shown in Graphic 3. Given that hitters are making solid contact early and not whiffing as often, since his four-seamer only has 19.3% and his sinker a 11.8% whiff rate, Bundy isn’t working deep into counts that favor him and therefore can’t get to his big wipeout slider to finish off batters. . Graphic 2: Pitch Selection by Count . 2019 (left) 2020 (middle) 2021 (right) . Graphic 3: Opponents Slugging Percentage by Count . 2019 (left), 2020 (middle), 2021 (right) . Note: the numbers at the top of each circle display the count. The number at the bottom is the opponents slugging percentage during that count. The darker the blue is, the lower the slugging percentage. The darker the red is, the higher the slugging percentage. . Looking at Graphic 2 and 3 above, Bundy is more successful not only when he is using his off-speed pitches, but when he varies his pitch usage in each count, so that a hitter isn’t as likely to guess what’s coming. Although Bundy has factored in his sinker more often this year, it hasn’t done much to throw hitters off when he throws it in fastball heavy counts because his four-seamer and sinker are very similar pitches. Looking at Graphic 4 below his four-seamer and sinker were thrown at the same speed this year while varying only slightly in horizontal and vertical break. Without much difference in the movement or speed of the pitches, hitters are more likely to hit a sinker when guessing four-seamer or vice versa compared to any other pitch. This means even though he may be varying pitches by using his sinker more frequently, he isn’t throwing off hitters the way he does when switching in off-speed pitches. . Graphic 4: Bundy Pitch Speed and Break . Overall, it seems there are two changes Bundy can make to improve moving forward and regain his 2020 form: . Rely more on his off-speed. Throwing his four-seamer at a similar rate to 2020 and 2021 seems to be a good way of mixing it in, without relying on it too heavily. But Bundy shouldn’t be trying to throw his sinker more if it means replacing his off-speed pitches. His best option would be to drop his pitch mix usage rate back to his 2020 percentages. . | Mix up when he uses his pitches. In certain counts Bundy makes himself too predictable. In 2019 Bundy relied heavily on first pitch four-seamers throwing them over 50% of the time. By not varying speeds enough hitters were able to sit four-seamer and more often than not be right. By varying his pitch mix more in 2020 he dropped his opponents slugging percentage significantly. In 2021 Bundy has become more predictable again by throwing either four-seamers or sinkers a majority of the time early in at bats and when behind in the count. Bundy needs to switch up his pitch usage within the same count to keep hitters guessing on every pitch. . |",
            "url": "https://jssheehan.github.io/ws/actions/markdown/2021/09/21/Dylan-Bundy-Analysis.html",
            "relUrl": "/actions/markdown/2021/09/21/Dylan-Bundy-Analysis.html",
            "date": " • Sep 21, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Predicting Wins in Baseball",
            "content": "Predicting Wins in Baseball . Author: Jerry Scott Sheehan . import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt import ctypes import shutil from sklearn import model_selection from sklearn.model_selection import train_test_split from sklearn import metrics from sklearn.linear_model import LinearRegression from sklearn.model_selection import cross_val_predict . Load Data . There are two data sources. . baseball_stats: This one includes all of the teams stats from the season 1998-2017. I chose this time period because the most recent new franchises began in 1998. This means all 30 teams will have played the same number of games over that time. | baseball_wins: This one includes each of the 30 teams wins per season from 1998-2017. | . baseball_stats = &quot;./data/Baseball_Stats.csv&quot; baseball_wins = &quot;./data/Baseball_Wins.csv&quot; . . stats = pd.read_csv(baseball_stats) stats.head() . Team HR R RBI IBB HBP SF SH GDP SB CS AVG GB FB LD Pitches BB% K% OBP SLG OPS ISO BABIP LD% GB% FB% IFFB% HR/FB wOBA wRAA wRC Pos RAR wRC+ Clutch O-Swing% Z-Swing% Swing% Age Rng Pull% Cent% Oppo% Soft% Med% Hard% O-Contact% Z-Contact% Contact% Zone% F-Strike% BsR . 0 Yankees | 4049 | 16169 | 15498 | 678 | 1278 | 902 | 551 | 2559 | 2045 | 665 | 0.268 | 32432 | 26060 | 14508 | 399336 | 9.50% | 17.50% | 0.344 | 0.440 | 0.784 | 0.172 | 0.298 | 19.90% | 44.40% | 35.70% | 10.00% | 13.20% | 0.341 | 1665.6 | 16277 | -308.8 | 4658.4 | 108 | -12.98 | 24.70% | 66.00% | 44.20% | 20 - 46 | 42.50% | 32.50% | 25.10% | 17.00% | 53.80% | 29.20% | 63.00% | 88.20% | 80.80% | 47.20% | 48.70% | 63.0 | . 1 Red Sox | 3625 | 16128 | 15375 | 815 | 1123 | 992 | 451 | 2561 | 1588 | 556 | 0.272 | 31207 | 27833 | 15241 | 408834 | 9.20% | 17.50% | 0.344 | 0.441 | 0.786 | 0.169 | 0.307 | 20.50% | 42.00% | 37.50% | 10.30% | 11.10% | 0.341 | 1671.1 | 16388 | -307.2 | 4773.4 | 106 | -22.10 | 24.90% | 64.80% | 44.00% | 20 - 44 | 42.20% | 32.60% | 25.30% | 15.70% | 54.10% | 30.30% | 64.60% | 88.40% | 81.40% | 48.00% | 49.20% | -54.8 | . 2 Rockies | 3476 | 15610 | 14830 | 855 | 942 | 850 | 1370 | 2380 | 1812 | 815 | 0.272 | 31485 | 24210 | 15063 | 389168 | 8.40% | 18.70% | 0.338 | 0.438 | 0.776 | 0.166 | 0.314 | 21.30% | 44.50% | 34.20% | 9.30% | 11.90% | 0.336 | 1105.9 | 15624 | 725.3 | 2791.8 | 89 | -30.66 | 26.80% | 67.80% | 46.70% | 20 - 49 | 38.30% | 34.50% | 27.20% | 17.00% | 54.80% | 28.20% | 62.20% | 86.00% | 79.00% | 48.70% | 50.30% | 18.7 | . 3 Rangers | 3936 | 15800 | 15059 | 634 | 1106 | 934 | 679 | 2412 | 1864 | 727 | 0.269 | 31106 | 26773 | 14880 | 390531 | 8.20% | 18.00% | 0.333 | 0.441 | 0.774 | 0.173 | 0.301 | 20.50% | 42.80% | 36.80% | 10.10% | 12.30% | 0.335 | 1093.6 | 15579 | -305.5 | 3840.1 | 100 | -17.39 | 27.00% | 67.00% | 46.20% | 19 - 45 | 41.10% | 33.40% | 25.50% | 16.10% | 54.50% | 29.40% | 61.60% | 86.80% | 79.10% | 47.90% | 49.90% | 110.4 | . 4 Indians | 3446 | 15187 | 14483 | 619 | 1185 | 940 | 734 | 2481 | 1773 | 714 | 0.264 | 31110 | 26009 | 14632 | 396036 | 9.00% | 18.40% | 0.336 | 0.425 | 0.761 | 0.161 | 0.302 | 20.40% | 43.40% | 36.20% | 9.70% | 10.80% | 0.332 | 738.7 | 15254 | -303.6 | 4066.0 | 103 | -16.09 | 24.80% | 65.80% | 44.60% | 20 - 43 | 43.00% | 32.00% | 25.00% | 15.80% | 55.30% | 28.90% | 62.40% | 87.50% | 80.30% | 48.30% | 49.20% | 36.1 | . wins=pd.read_csv(baseball_wins) wins.head() . Year G ARI ATL BLA BAL BOS CHC CHW CIN CLE COL DET HOU KCR LAA LAD MIA MIL MIN NYM NYY OAK PHI PIT SDP SFG SEA STL TBR TEX TOR WSN . 0 2017 | 162 | 93 | 72 | NaN | 75 | 93 | 92 | 67 | 68 | 102 | 87 | 64 | 101 | 80 | 80 | 104 | 77 | 86 | 85 | 70 | 91 | 75 | 66 | 75 | 71 | 64 | 78 | 83 | 80 | 78 | 76 | 97 | . 1 2016 | 162 | 69 | 68 | NaN | 89 | 93 | 103 | 78 | 68 | 94 | 75 | 86 | 84 | 81 | 74 | 91 | 79 | 73 | 59 | 87 | 84 | 69 | 71 | 78 | 68 | 87 | 86 | 86 | 68 | 95 | 89 | 95 | . 2 2015 | 162 | 79 | 67 | NaN | 81 | 78 | 97 | 76 | 64 | 81 | 68 | 74 | 86 | 95 | 85 | 92 | 71 | 68 | 83 | 90 | 87 | 68 | 63 | 98 | 74 | 84 | 76 | 100 | 80 | 88 | 93 | 83 | . 3 2014 | 162 | 64 | 79 | NaN | 96 | 71 | 73 | 73 | 76 | 85 | 66 | 90 | 70 | 89 | 98 | 94 | 77 | 82 | 70 | 79 | 84 | 88 | 73 | 88 | 77 | 88 | 87 | 90 | 77 | 67 | 83 | 96 | . 4 2013 | 163 | 81 | 96 | NaN | 85 | 97 | 66 | 63 | 90 | 92 | 74 | 93 | 51 | 86 | 78 | 92 | 62 | 74 | 66 | 74 | 85 | 96 | 73 | 94 | 76 | 76 | 71 | 97 | 92 | 91 | 74 | 86 | . Functions . Below are all the functions created for the analysis . def Message_Box(msg): ctypes.windll.user32.MessageBoxW(0, msg, &quot;Error:&quot;, 1); return . def shape_chk(df, rownum): if df.shape[0] != rownum: Message_Box(&quot;There should be &quot; + str(rownum) + &quot; rows in the &quot; + df.name + &quot; dataset but instead there are &quot; + str(df.shape[0])) return df . def valuechk(value, in_ ): if value not in in_: Message_Box(&quot;The value &quot; + str(value) + &quot; is missing from &quot; + str(in_)) . def df_index(df, col, value): df.set_index(col, inplace=True) valuechk(value, df.index) return df . def ckf4outliers(df, col): outliers = df[df[col] &gt; df[col].mean() + 3 * df[col].std()] outliers = outliers + (df[df[col] &gt; df[col].mean() + 3 * df[col].std()]) print(outliers) . def dropcolschk(df, cols): scolnum = df.shape[1] dropnum = len(cols) df.drop(cols, inplace=True, axis=1) finnum = df.shape[1] if finnum != scolnum - dropnum: Message_Box(str(dropnum) + &quot; columns were dropped so there should be &quot; + str(scolnum - dropnum) + &quot; columns. Instead there are &quot; + str(finnum)) . def chk4nulls(df): for i in range(0, len(df.columns)): if df.isnull().sum()[i] &gt; 0: Message_Box(&quot;There are &quot; + str(df.isnull().sum()[i]) + &quot; blanks in the column &quot; + str(df.columns[i]) +&quot; of the dataframe &quot; + df.name) return df . def chgdtype(df): for column_name in df.columns: if column_name.endswith(&quot;Pct&quot;): df[column_name] = df[column_name].str.rstrip(&#39;%&#39;).astype(&#39;float&#39;) / 100.0 return df . def plotfunct(xvar, yvar, data): sns.lmplot(x=xvar, y=yvar, data=data, ci=None, fit_reg=True); . def scatter(x,y, title, xlabel, ylabel): plt.scatter(x, y) plt.title(title) plt.xlabel(xlabel) plt.ylabel(ylabel); . def train(pct, num, title, xlabel, ylabel): X_train = {} X_test = {} y_train = {} y_test = {} y_pred = {} X_train[num], X_test[num], y_train[num], y_test[num] = train_test_split(X, y, test_size = pct) lr = LinearRegression() lr.fit(X_train[num], y_train[num]) y_pred[num] = lr.predict(X_test[num]) print(metrics.mean_squared_error(y_train[num], lr.predict(X_train[num]))) print(metrics.mean_squared_error(y_test[num], y_pred[num])) i=0 a=0 for i in range(0,1000): a = a+ lr.score(X_test[num], y_test[num]) i=i+1 print(a/1000) scatter(y_test[num], y_pred[num], title, xlabel, ylabel) . def crossval(X,y): mse_values = [] scores = [] n = 0 for train_index, test_index in kf.split(X, y): X_train = X.iloc[train_index] y_train = y.iloc[train_index] X_test = X.iloc[test_index] y_test = y.iloc[test_index] lr = LinearRegression().fit(X_train, y_train) y_pred = lr.predict(X_test) mse = metrics.mean_squared_error(y_test, y_pred) mse_values.append(mse) r2 = lr.score(X_test, y_test) scores.append(lr.score(X, y)) n += 1 print(&quot;~~~~ SUMMARY OF CROSS VALIDATION ~~~~&quot;) print(&#39;Mean of R2 for all folds: {}&#39;.format(np.mean(scores))) predictions = cross_val_predict(lr, X, y, cv=30) plt.scatter(y, predictions) plt.title(&#39;Predictions vs Actual&#39;); plt.xlabel(&quot;Actual&quot;); plt.ylabel(&quot;Predictions&quot;); . def prediction(X, y, splits, RAR, RC_plus, OBP, BB_Pct, ratio1, ratio2, ratio3, Team): kf = model_selection.KFold(n_splits=splits, shuffle=True) mse_values = [] scores = [] n = 0 for train_index, test_index in kf.split(X, y): X_train = X.iloc[train_index] y_train = y.iloc[train_index] X_test = X.iloc[test_index] y_test = y.iloc[test_index] lr = LinearRegression().fit(X_train, y_train) print(Team + &quot;: &quot; + str((lr.predict([[(RAR*ratio1)/ratio2,RC_plus,OBP,BB_Pct]])/20)*ratio3)) . Exploratory Data Analysis . Start with the Stats dataset . stats.name = &quot;stats&quot; . Shape . shape_chk(stats, 30); . Index . df_index(stats, &quot;Team&quot;, &quot;Dodgers&quot;); . Teams . stats.index . Index([&#39;Yankees&#39;, &#39;Red Sox&#39;, &#39;Rockies&#39;, &#39;Rangers&#39;, &#39;Indians&#39;, &#39;Cardinals&#39;, &#39;Blue Jays&#39;, &#39;Tigers&#39;, &#39;White Sox&#39;, &#39;Angels&#39;, &#39;Orioles&#39;, &#39;Braves&#39;, &#39;Athletics&#39;, &#39;Phillies&#39;, &#39;Diamondbacks&#39;, &#39;Astros&#39;, &#39;Brewers&#39;, &#39;Reds&#39;, &#39;Cubs&#39;, &#39;Twins&#39;, &#39;Giants&#39;, &#39;Dodgers&#39;, &#39;Devil Rays&#39;, &#39;Mariners&#39;, &#39;Royals&#39;, &#39;Mets&#39;, &#39;Expos&#39;, &#39;Marlins&#39;, &#39;Pirates&#39;, &#39;Padres&#39;], dtype=&#39;object&#39;, name=&#39;Team&#39;) . Looking at the teams two that stand out are the Devil Rays and Expos since they are no longer the names of their respective teams. They are now the Rays and Nationals. The franchises are still the same so we should check that this data is based on the franchise and not just the team name. . Going to check this by looking at the number of runs and seeing if those teams have much fewer than the others. Since the Expos became the Nationals in 2005 and the Devil Rays became the Rays in 2008 they would have much fewer runs scored in this time unless this data is using the franchise instead of just the team name. . ckf4outliers(stats, &quot;R&quot;); . Empty DataFrame Columns: [HR, R, RBI, IBB, HBP, SF, SH, GDP, SB, CS, AVG, GB, FB, LD, Pitches, BB%, K%, OBP, SLG, OPS, ISO, BABIP, LD%, GB%, FB%, IFFB%, HR/FB, wOBA, wRAA, wRC, Pos, RAR, wRC+, Clutch, O-Swing%, Z-Swing%, Swing%, Age Rng, Pull%, Cent%, Oppo%, Soft%, Med%, Hard%, O-Contact%, Z-Contact%, Contact%, Zone%, F-Strike%, BsR] Index: [] . There are no outliers so the data must be using the franchise. . Columns . stats.columns . Index([&#39;HR&#39;, &#39;R&#39;, &#39;RBI&#39;, &#39;IBB&#39;, &#39;HBP&#39;, &#39;SF&#39;, &#39;SH&#39;, &#39;GDP&#39;, &#39;SB&#39;, &#39;CS&#39;, &#39;AVG&#39;, &#39;GB&#39;, &#39;FB&#39;, &#39;LD&#39;, &#39;Pitches&#39;, &#39;BB%&#39;, &#39;K%&#39;, &#39;OBP&#39;, &#39;SLG&#39;, &#39;OPS&#39;, &#39;ISO&#39;, &#39;BABIP&#39;, &#39;LD%&#39;, &#39;GB%&#39;, &#39;FB%&#39;, &#39;IFFB%&#39;, &#39;HR/FB&#39;, &#39;wOBA&#39;, &#39;wRAA&#39;, &#39;wRC&#39;, &#39;Pos&#39;, &#39;RAR&#39;, &#39;wRC+&#39;, &#39;Clutch&#39;, &#39;O-Swing%&#39;, &#39;Z-Swing%&#39;, &#39;Swing%&#39;, &#39;Age Rng&#39;, &#39;Pull%&#39;, &#39;Cent%&#39;, &#39;Oppo%&#39;, &#39;Soft%&#39;, &#39;Med%&#39;, &#39;Hard%&#39;, &#39;O-Contact%&#39;, &#39;Z-Contact%&#39;, &#39;Contact%&#39;, &#39;Zone%&#39;, &#39;F-Strike%&#39;, &#39;BsR&#39;], dtype=&#39;object&#39;) . Drop Columns . We most likely do not need repetitive variables such as GB and GB%. The same applies for FB and FB% as well as LD and LD%. We should keep those that are percentages as this will eliminate factors that could bias on our data such as number of at bats. More at bats would most likely result in more ground balls. By using the percent we can view just the added benefit of seeing their groundball ratio. . Based on this we will drop GB, FB, and LD . dropcolschk(stats, [&#39;GB&#39;, &#39;FB&#39;, &#39;LD&#39;]) . - Rename Columns . It would be better to rename the columns that use &#39;%&#39;, &quot;/&quot;, or &quot;+&quot; in the column name. Below will look at all column names in our dataframe and find those that end in %. It will then take these column name, remove the % and add &#39;_Pct&#39; instead. . for column_name in stats.columns: if column_name.endswith(&#39;%&#39;): stats = stats.rename(columns={column_name: column_name.strip(&#39;%&#39;)+&#39;_Pct&#39;}) elif &quot;/&quot; in column_name: stats = stats.rename(columns={column_name: column_name.replace(&quot;/&quot;, &quot;_&quot;)+&#39;_Pct&#39;}) elif &quot;+&quot; in column_name: stats = stats.rename(columns={column_name: column_name.replace(&quot;+&quot;, &quot;_plus&quot;)}) . stats.columns . Index([&#39;HR&#39;, &#39;R&#39;, &#39;RBI&#39;, &#39;IBB&#39;, &#39;HBP&#39;, &#39;SF&#39;, &#39;SH&#39;, &#39;GDP&#39;, &#39;SB&#39;, &#39;CS&#39;, &#39;AVG&#39;, &#39;Pitches&#39;, &#39;BB_Pct&#39;, &#39;K_Pct&#39;, &#39;OBP&#39;, &#39;SLG&#39;, &#39;OPS&#39;, &#39;ISO&#39;, &#39;BABIP&#39;, &#39;LD_Pct&#39;, &#39;GB_Pct&#39;, &#39;FB_Pct&#39;, &#39;IFFB_Pct&#39;, &#39;HR_FB_Pct&#39;, &#39;wOBA&#39;, &#39;wRAA&#39;, &#39;wRC&#39;, &#39;Pos&#39;, &#39;RAR&#39;, &#39;wRC_plus&#39;, &#39;Clutch&#39;, &#39;O-Swing_Pct&#39;, &#39;Z-Swing_Pct&#39;, &#39;Swing_Pct&#39;, &#39;Age Rng&#39;, &#39;Pull_Pct&#39;, &#39;Cent_Pct&#39;, &#39;Oppo_Pct&#39;, &#39;Soft_Pct&#39;, &#39;Med_Pct&#39;, &#39;Hard_Pct&#39;, &#39;O-Contact_Pct&#39;, &#39;Z-Contact_Pct&#39;, &#39;Contact_Pct&#39;, &#39;Zone_Pct&#39;, &#39;F-Strike_Pct&#39;, &#39;BsR&#39;], dtype=&#39;object&#39;) . Check for nulls . chk4nulls(stats); . No null values so good here . Data Types . stats.dtypes . HR int64 R int64 RBI int64 IBB int64 HBP int64 SF int64 SH int64 GDP int64 SB int64 CS int64 AVG float64 Pitches int64 BB_Pct object K_Pct object OBP float64 SLG float64 OPS float64 ISO float64 BABIP float64 LD_Pct object GB_Pct object FB_Pct object IFFB_Pct object HR_FB_Pct object wOBA float64 wRAA float64 wRC int64 Pos float64 RAR float64 wRC_plus int64 Clutch float64 O-Swing_Pct object Z-Swing_Pct object Swing_Pct object Age Rng object Pull_Pct object Cent_Pct object Oppo_Pct object Soft_Pct object Med_Pct object Hard_Pct object O-Contact_Pct object Z-Contact_Pct object Contact_Pct object Zone_Pct object F-Strike_Pct object BsR float64 dtype: object . A lot of these are percentages, but considered objects. We will most likely want them to become floats so they are easier to use. The following will change them to being percentages. . chgdtype(stats); #Take a look at the first 5 of this example column stats[&quot;F-Strike_Pct&quot;].head() . Team Yankees 0.487 Red Sox 0.492 Rockies 0.503 Rangers 0.499 Indians 0.492 Name: F-Strike_Pct, dtype: float64 . stats[&quot;F-Strike_Pct&quot;].dtype . dtype(&#39;float64&#39;) . This has successfuly converted the percent values to floats . Last Check . Take one last look at the data now to see if anything stands out needing to be corrected . pd.options.display.max_columns = None stats.head() . HR R RBI IBB HBP SF SH GDP SB CS AVG Pitches BB_Pct K_Pct OBP SLG OPS ISO BABIP LD_Pct GB_Pct FB_Pct IFFB_Pct HR_FB_Pct wOBA wRAA wRC Pos RAR wRC_plus Clutch O-Swing_Pct Z-Swing_Pct Swing_Pct Age Rng Pull_Pct Cent_Pct Oppo_Pct Soft_Pct Med_Pct Hard_Pct O-Contact_Pct Z-Contact_Pct Contact_Pct Zone_Pct F-Strike_Pct BsR . Team . Yankees 4049 | 16169 | 15498 | 678 | 1278 | 902 | 551 | 2559 | 2045 | 665 | 0.268 | 399336 | 0.095 | 0.175 | 0.344 | 0.440 | 0.784 | 0.172 | 0.298 | 0.199 | 0.444 | 0.357 | 0.100 | 0.132 | 0.341 | 1665.6 | 16277 | -308.8 | 4658.4 | 108 | -12.98 | 0.247 | 0.660 | 0.442 | 20 - 46 | 0.425 | 0.325 | 0.251 | 0.170 | 0.538 | 0.292 | 0.630 | 0.882 | 0.808 | 0.472 | 0.487 | 63.0 | . Red Sox 3625 | 16128 | 15375 | 815 | 1123 | 992 | 451 | 2561 | 1588 | 556 | 0.272 | 408834 | 0.092 | 0.175 | 0.344 | 0.441 | 0.786 | 0.169 | 0.307 | 0.205 | 0.420 | 0.375 | 0.103 | 0.111 | 0.341 | 1671.1 | 16388 | -307.2 | 4773.4 | 106 | -22.10 | 0.249 | 0.648 | 0.440 | 20 - 44 | 0.422 | 0.326 | 0.253 | 0.157 | 0.541 | 0.303 | 0.646 | 0.884 | 0.814 | 0.480 | 0.492 | -54.8 | . Rockies 3476 | 15610 | 14830 | 855 | 942 | 850 | 1370 | 2380 | 1812 | 815 | 0.272 | 389168 | 0.084 | 0.187 | 0.338 | 0.438 | 0.776 | 0.166 | 0.314 | 0.213 | 0.445 | 0.342 | 0.093 | 0.119 | 0.336 | 1105.9 | 15624 | 725.3 | 2791.8 | 89 | -30.66 | 0.268 | 0.678 | 0.467 | 20 - 49 | 0.383 | 0.345 | 0.272 | 0.170 | 0.548 | 0.282 | 0.622 | 0.860 | 0.790 | 0.487 | 0.503 | 18.7 | . Rangers 3936 | 15800 | 15059 | 634 | 1106 | 934 | 679 | 2412 | 1864 | 727 | 0.269 | 390531 | 0.082 | 0.180 | 0.333 | 0.441 | 0.774 | 0.173 | 0.301 | 0.205 | 0.428 | 0.368 | 0.101 | 0.123 | 0.335 | 1093.6 | 15579 | -305.5 | 3840.1 | 100 | -17.39 | 0.270 | 0.670 | 0.462 | 19 - 45 | 0.411 | 0.334 | 0.255 | 0.161 | 0.545 | 0.294 | 0.616 | 0.868 | 0.791 | 0.479 | 0.499 | 110.4 | . Indians 3446 | 15187 | 14483 | 619 | 1185 | 940 | 734 | 2481 | 1773 | 714 | 0.264 | 396036 | 0.090 | 0.184 | 0.336 | 0.425 | 0.761 | 0.161 | 0.302 | 0.204 | 0.434 | 0.362 | 0.097 | 0.108 | 0.332 | 738.7 | 15254 | -303.6 | 4066.0 | 103 | -16.09 | 0.248 | 0.658 | 0.446 | 20 - 43 | 0.430 | 0.320 | 0.250 | 0.158 | 0.553 | 0.289 | 0.624 | 0.875 | 0.803 | 0.483 | 0.492 | 36.1 | . There are a few things that stand out here. First Age Rng doesnt look as though it would be too helpful. If it were the average age or gave us more of a distribution it could, but it only includes the max and min making it possible that a team has an outlier or two that would skew this variable. Better to eliminate this variable. . Another note is that Pos does not make sense. Pos stands for position which should be categorical, but instead is coming up as a numeric value with negative numbers. We should remove this column. . dropcolschk(stats, [&#39;Age Rng&#39;, &#39;Pos&#39;]) . The Wins Dataset . wins.name = &quot;wins&quot; . Shape . #worth of data and each row is a year shape_chk(wins, 20); . Columns . wins.columns . Index([&#39;Year&#39;, &#39;G&#39;, &#39;ARI&#39;, &#39;ATL&#39;, &#39;BLA&#39;, &#39;BAL&#39;, &#39;BOS&#39;, &#39;CHC&#39;, &#39;CHW&#39;, &#39;CIN&#39;, &#39;CLE&#39;, &#39;COL&#39;, &#39;DET&#39;, &#39;HOU&#39;, &#39;KCR&#39;, &#39;LAA&#39;, &#39;LAD&#39;, &#39;MIA&#39;, &#39;MIL&#39;, &#39;MIN&#39;, &#39;NYM&#39;, &#39;NYY&#39;, &#39;OAK&#39;, &#39;PHI&#39;, &#39;PIT&#39;, &#39;SDP&#39;, &#39;SFG&#39;, &#39;SEA&#39;, &#39;STL&#39;, &#39;TBR&#39;, &#39;TEX&#39;, &#39;TOR&#39;, &#39;WSN&#39;], dtype=&#39;object&#39;) . BLA is an old team that has not played since before 1998 so we can remove this column. First we need to double check that this is all blank. . chk4nulls(wins); . This returns a pop-up box saying there are 20 nulls values in the BLA column. Since there are rows, this column is all blank. No other columns are all blank so we should drop the BLA column. . dropcolschk(wins, [&quot;BLA&quot;]) . Take another look now at the columns so see if there are any others to drop. . wins.columns . Index([&#39;Year&#39;, &#39;G&#39;, &#39;ARI&#39;, &#39;ATL&#39;, &#39;BAL&#39;, &#39;BOS&#39;, &#39;CHC&#39;, &#39;CHW&#39;, &#39;CIN&#39;, &#39;CLE&#39;, &#39;COL&#39;, &#39;DET&#39;, &#39;HOU&#39;, &#39;KCR&#39;, &#39;LAA&#39;, &#39;LAD&#39;, &#39;MIA&#39;, &#39;MIL&#39;, &#39;MIN&#39;, &#39;NYM&#39;, &#39;NYY&#39;, &#39;OAK&#39;, &#39;PHI&#39;, &#39;PIT&#39;, &#39;SDP&#39;, &#39;SFG&#39;, &#39;SEA&#39;, &#39;STL&#39;, &#39;TBR&#39;, &#39;TEX&#39;, &#39;TOR&#39;, &#39;WSN&#39;], dtype=&#39;object&#39;) . We don&#39;t need to sum Year and G as these are not Team names so we can remove these columns. . dropcolschk(wins, [&quot;Year&quot;, &quot;G&quot;]) . - Rename Columns . The stats dataframe has all of team names with their full names rather than acronyms. In order to merge these datasets they need to line up so will change the acronyms here to be the full team now. . Acronyms = [&#39;ARI&#39;, &#39;ATL&#39;, &#39;BAL&#39;, &#39;BOS&#39;, &#39;CHC&#39;, &#39;CHW&#39;,&#39;CIN&#39;, &#39;CLE&#39;, &#39;COL&#39;, &#39;DET&#39;, &#39;HOU&#39;, &#39;KCR&#39;, &#39;LAA&#39;,&#39;LAD&#39;, &#39;MIA&#39;, &#39;MIL&#39;, &#39;MIN&#39;, &#39;NYM&#39;, &#39;NYY&#39;, &#39;OAK&#39;,&#39;PHI&#39;, &#39;PIT&#39;, &#39;SDP&#39;, &#39;SFG&#39;, &#39;SEA&#39;, &#39;STL&#39;, &#39;TBR&#39;, &#39;TEX&#39;, &#39;TOR&#39;, &#39;WSN&#39;] Fullnames = [&#39;Diamondbacks&#39;, &#39;Braves&#39;, &#39;Orioles&#39;, &#39;Red Sox&#39;, &#39;Cubs&#39;, &#39;White Sox&#39;,&#39;Reds&#39;, &#39;Indians&#39;, &#39;Rockies&#39;, &#39;Tigers&#39;, &#39;Astros&#39;, &#39;Royals&#39;, &#39;Angels&#39;, &#39;Dodgers&#39;, &#39;Marlins&#39;, &#39;Brewers&#39;, &#39;Twins&#39;, &#39;Mets&#39;, &#39;Yankees&#39;, &#39;Athletics&#39;, &#39;Phillies&#39;, &#39;Pirates&#39;, &#39;Padres&#39;, &#39;Giants&#39;, &#39;Mariners&#39;, &#39;Cardinals&#39;, &#39;Devil Rays&#39;, &#39;Rangers&#39;, &#39;Blue Jays&#39;, &#39;Expos&#39;] . for i in range(0, len(wins.columns)): wins=wins.rename(columns={Acronyms[i]: Fullnames[i]}) . valuechk(&quot;Dodgers&quot;, wins.columns) . Data Types . wins.dtypes . Diamondbacks int64 Braves int64 Orioles int64 Red Sox int64 Cubs int64 White Sox int64 Reds int64 Indians int64 Rockies int64 Tigers int64 Astros int64 Royals int64 Angels int64 Dodgers int64 Marlins int64 Brewers int64 Twins int64 Mets int64 Yankees int64 Athletics int64 Phillies int64 Pirates int64 Padres int64 Giants int64 Mariners int64 Cardinals int64 Devil Rays int64 Rangers int64 Blue Jays int64 Expos int64 dtype: object . These are all integers which is what we want because we are dealing with wins. . Sum . What we are really looking for with this table is the total number of wins for each team. Now that the table is cleaned up we can sum all the columns to find the number of wins for each team. wins_tot will be a row with the summed wins from 1998-2018 for each team. . wins_tot=wins.append(wins.sum(numeric_only=True), ignore_index=True) . wins_tot = wins_tot.tail(1) wins_tot . Diamondbacks Braves Orioles Red Sox Cubs White Sox Reds Indians Rockies Tigers Astros Royals Angels Dodgers Marlins Brewers Twins Mets Yankees Athletics Phillies Pirates Padres Giants Mariners Cardinals Devil Rays Rangers Blue Jays Expos . 20 1596 | 1757 | 1509 | 1786 | 1602 | 1621 | 1557 | 1673 | 1508 | 1534 | 1610 | 1449 | 1725 | 1743 | 1516 | 1528 | 1582 | 1630 | 1895 | 1696 | 1628 | 1469 | 1544 | 1701 | 1593 | 1791 | 1500 | 1657 | 1631 | 1548 | . Merging the Dataframes . For this analysis we need to merge the two datasets together to get the predictor column &quot;wins&quot; onto the stats dataset where we will choose the features from. To do this we need to sum all the rows to get the total number of wins and then transpose the table. . Transpose . wins_tott=np.transpose(wins_tot) . wins_tott.shape . (30, 1) . This has been transposed since there is only 1 column and 30 rows . Columns . wins_tott.columns . RangeIndex(start=20, stop=21, step=1) . Taking a look at the columns we see that the only one is called 20. This column represents the wins for each team so we will call it wins. . wins_tott=wins_tott.rename(columns={20: &#39;Wins&#39;}) . valuechk(&quot;Wins&quot;, wins_tott.columns) . The Merge . The final step is to merge the stats and wins_tott datasets together which can be done using the .merge functions from pandas and using the indexes (Team name) from each dataset. . bball_data = pd.merge(wins_tott, stats, left_index=True, right_index=True) bball_data.head() . Wins HR R RBI IBB HBP SF SH GDP SB CS AVG Pitches BB_Pct K_Pct OBP SLG OPS ISO BABIP LD_Pct GB_Pct FB_Pct IFFB_Pct HR_FB_Pct wOBA wRAA wRC RAR wRC_plus Clutch O-Swing_Pct Z-Swing_Pct Swing_Pct Pull_Pct Cent_Pct Oppo_Pct Soft_Pct Med_Pct Hard_Pct O-Contact_Pct Z-Contact_Pct Contact_Pct Zone_Pct F-Strike_Pct BsR . Diamondbacks 1596 | 3303 | 14285 | 13639 | 918 | 934 | 870 | 1083 | 2265 | 1805 | 720 | 0.258 | 388205 | 0.087 | 0.190 | 0.327 | 0.418 | 0.745 | 0.160 | 0.298 | 0.204 | 0.444 | 0.353 | 0.108 | 0.108 | 0.323 | -182.2 | 14242 | 3192.3 | 91 | -30.27 | 0.260 | 0.657 | 0.451 | 0.398 | 0.339 | 0.263 | 0.169 | 0.541 | 0.290 | 0.609 | 0.867 | 0.789 | 0.480 | 0.498 | 39.3 | . Braves 1757 | 3209 | 14304 | 13623 | 950 | 958 | 811 | 1316 | 2541 | 1593 | 695 | 0.261 | 383269 | 0.088 | 0.183 | 0.331 | 0.412 | 0.743 | 0.151 | 0.300 | 0.205 | 0.453 | 0.342 | 0.094 | 0.109 | 0.324 | -168.8 | 14277 | 4235.7 | 96 | -11.62 | 0.267 | 0.685 | 0.467 | 0.398 | 0.338 | 0.264 | 0.170 | 0.541 | 0.289 | 0.622 | 0.860 | 0.789 | 0.479 | 0.501 | -43.0 | . Orioles 1509 | 3567 | 14258 | 13614 | 554 | 1034 | 847 | 606 | 2566 | 1621 | 667 | 0.262 | 381742 | 0.077 | 0.174 | 0.324 | 0.420 | 0.743 | 0.157 | 0.293 | 0.197 | 0.434 | 0.369 | 0.112 | 0.113 | 0.324 | -87.9 | 14232 | 3158.9 | 97 | -16.06 | 0.281 | 0.673 | 0.469 | 0.422 | 0.324 | 0.254 | 0.173 | 0.544 | 0.284 | 0.632 | 0.878 | 0.801 | 0.480 | 0.504 | -91.6 | . Red Sox 1786 | 3625 | 16128 | 15375 | 815 | 1123 | 992 | 451 | 2561 | 1588 | 556 | 0.272 | 408834 | 0.092 | 0.175 | 0.344 | 0.441 | 0.786 | 0.169 | 0.307 | 0.205 | 0.420 | 0.375 | 0.103 | 0.111 | 0.341 | 1671.1 | 16388 | 4773.4 | 106 | -22.10 | 0.249 | 0.648 | 0.440 | 0.422 | 0.326 | 0.253 | 0.157 | 0.541 | 0.303 | 0.646 | 0.884 | 0.814 | 0.480 | 0.492 | -54.8 | . Cubs 1602 | 3448 | 14021 | 13351 | 836 | 1089 | 757 | 1240 | 2360 | 1430 | 670 | 0.257 | 384816 | 0.085 | 0.193 | 0.326 | 0.416 | 0.742 | 0.160 | 0.296 | 0.205 | 0.440 | 0.355 | 0.096 | 0.115 | 0.323 | -248.4 | 14130 | 3821.4 | 93 | -52.59 | 0.274 | 0.680 | 0.469 | 0.410 | 0.329 | 0.261 | 0.172 | 0.546 | 0.282 | 0.599 | 0.863 | 0.782 | 0.479 | 0.505 | -62.1 | . We now have our dataset set up correctly. Each team has data from 1998-2018 for multiple statistics as well as the total number of wins for that time period. These statistics can now be used to predict the number of wins a team will get in the Analysis and Model section. . Analysis and Model . Correlation . First we need to find which variables are most related to our predictor variable, Wins. This can be done by looking into the correlations of each variable with Wins. Using the .corr() function we can see these correlations. . bball_correlations = bball_data.corr(); bball_correlations[&#39;Wins&#39;].sort_values(ascending = False).head() . Wins 1.000000 RAR 0.851050 wRC_plus 0.760739 OBP 0.719096 BB_Pct 0.651476 Name: Wins, dtype: float64 . RAR, wRC_plus, and OBP all have positive correlations over 0.7, which is considered a good correlation. If needed we can also look at BB_Pct which has a positive correlations over .65 meaning it is at least decently well correlated. . bball_correlations[&#39;Wins&#39;].sort_values(ascending = False).tail() . CS -0.377182 K_Pct -0.432661 Swing_Pct -0.436613 O-Swing_Pct -0.561483 F-Strike_Pct -0.637404 Name: Wins, dtype: float64 . F-Strike_Pct (First Strike Percentage) has a correlation under -.6 which is a decently strong correlation as well. These make sense being negative because: . getting the first strike on a batter significantly decreases the batter’s chance of success and likewise increases a pitcher’s chance of success. | . - Plots . To get a better visual of these variables and their relationship with Wins, we will plot each variable against Wins. . plotfunct(&#39;RAR&#39;, &#39;Wins&#39;, bball_data) . plotfunct(&#39;wRC_plus&#39;, &#39;Wins&#39;, bball_data) . plotfunct(&#39;OBP&#39;, &#39;Wins&#39;, bball_data) . RAR, wRC_plus, and OBP all appear to have strong linear relationships with Wins so they are good variables to use moving forward with our model. These will then be our feature columns and y will be our predictor variable which is Wins. . Fix RAR column . Before continuing it would be best to divide RAR by 20 as the way the dataset is using it is by adding up all the yearly RAR values for each team. This way we can view the RAR for each year. . bball_data[&quot;RAR_yr&quot;] = bball_data[[&quot;RAR&quot;]]/20 bball_correlations = bball_data.corr(); . valuechk(&quot;RAR_yr&quot;, bball_data.columns) . bball_data . Wins HR R RBI IBB HBP SF SH GDP SB CS AVG Pitches BB_Pct K_Pct OBP SLG OPS ISO BABIP LD_Pct GB_Pct FB_Pct IFFB_Pct HR_FB_Pct wOBA wRAA wRC RAR wRC_plus Clutch O-Swing_Pct Z-Swing_Pct Swing_Pct Pull_Pct Cent_Pct Oppo_Pct Soft_Pct Med_Pct Hard_Pct O-Contact_Pct Z-Contact_Pct Contact_Pct Zone_Pct F-Strike_Pct BsR RAR_yr . Diamondbacks 1596 | 3303 | 14285 | 13639 | 918 | 934 | 870 | 1083 | 2265 | 1805 | 720 | 0.258 | 388205 | 0.087 | 0.190 | 0.327 | 0.418 | 0.745 | 0.160 | 0.298 | 0.204 | 0.444 | 0.353 | 0.108 | 0.108 | 0.323 | -182.2 | 14242 | 3192.3 | 91 | -30.27 | 0.260 | 0.657 | 0.451 | 0.398 | 0.339 | 0.263 | 0.169 | 0.541 | 0.290 | 0.609 | 0.867 | 0.789 | 0.480 | 0.498 | 39.3 | 159.615 | . Braves 1757 | 3209 | 14304 | 13623 | 950 | 958 | 811 | 1316 | 2541 | 1593 | 695 | 0.261 | 383269 | 0.088 | 0.183 | 0.331 | 0.412 | 0.743 | 0.151 | 0.300 | 0.205 | 0.453 | 0.342 | 0.094 | 0.109 | 0.324 | -168.8 | 14277 | 4235.7 | 96 | -11.62 | 0.267 | 0.685 | 0.467 | 0.398 | 0.338 | 0.264 | 0.170 | 0.541 | 0.289 | 0.622 | 0.860 | 0.789 | 0.479 | 0.501 | -43.0 | 211.785 | . Orioles 1509 | 3567 | 14258 | 13614 | 554 | 1034 | 847 | 606 | 2566 | 1621 | 667 | 0.262 | 381742 | 0.077 | 0.174 | 0.324 | 0.420 | 0.743 | 0.157 | 0.293 | 0.197 | 0.434 | 0.369 | 0.112 | 0.113 | 0.324 | -87.9 | 14232 | 3158.9 | 97 | -16.06 | 0.281 | 0.673 | 0.469 | 0.422 | 0.324 | 0.254 | 0.173 | 0.544 | 0.284 | 0.632 | 0.878 | 0.801 | 0.480 | 0.504 | -91.6 | 157.945 | . Red Sox 1786 | 3625 | 16128 | 15375 | 815 | 1123 | 992 | 451 | 2561 | 1588 | 556 | 0.272 | 408834 | 0.092 | 0.175 | 0.344 | 0.441 | 0.786 | 0.169 | 0.307 | 0.205 | 0.420 | 0.375 | 0.103 | 0.111 | 0.341 | 1671.1 | 16388 | 4773.4 | 106 | -22.10 | 0.249 | 0.648 | 0.440 | 0.422 | 0.326 | 0.253 | 0.157 | 0.541 | 0.303 | 0.646 | 0.884 | 0.814 | 0.480 | 0.492 | -54.8 | 238.670 | . Cubs 1602 | 3448 | 14021 | 13351 | 836 | 1089 | 757 | 1240 | 2360 | 1430 | 670 | 0.257 | 384816 | 0.085 | 0.193 | 0.326 | 0.416 | 0.742 | 0.160 | 0.296 | 0.205 | 0.440 | 0.355 | 0.096 | 0.115 | 0.323 | -248.4 | 14130 | 3821.4 | 93 | -52.59 | 0.274 | 0.680 | 0.469 | 0.410 | 0.329 | 0.261 | 0.172 | 0.546 | 0.282 | 0.599 | 0.863 | 0.782 | 0.479 | 0.505 | -62.1 | 191.070 | . White Sox 1621 | 3717 | 14551 | 13943 | 495 | 1161 | 850 | 779 | 2496 | 1876 | 873 | 0.262 | 381881 | 0.079 | 0.176 | 0.326 | 0.425 | 0.750 | 0.163 | 0.292 | 0.200 | 0.434 | 0.366 | 0.116 | 0.119 | 0.326 | 191.3 | 14445 | 2971.5 | 97 | -13.15 | 0.277 | 0.673 | 0.468 | 0.422 | 0.313 | 0.266 | 0.179 | 0.546 | 0.276 | 0.630 | 0.874 | 0.799 | 0.483 | 0.503 | -143.7 | 148.575 | . Reds 1557 | 3556 | 14148 | 13489 | 867 | 1187 | 792 | 1319 | 2242 | 1999 | 773 | 0.256 | 386976 | 0.086 | 0.195 | 0.326 | 0.415 | 0.742 | 0.160 | 0.295 | 0.207 | 0.436 | 0.358 | 0.099 | 0.119 | 0.323 | -261.5 | 14188 | 3747.5 | 93 | -16.35 | 0.267 | 0.680 | 0.463 | 0.400 | 0.333 | 0.266 | 0.175 | 0.547 | 0.278 | 0.605 | 0.860 | 0.783 | 0.476 | 0.507 | 73.8 | 187.375 | . Indians 1673 | 3446 | 15187 | 14483 | 619 | 1185 | 940 | 734 | 2481 | 1773 | 714 | 0.264 | 396036 | 0.090 | 0.184 | 0.336 | 0.425 | 0.761 | 0.161 | 0.302 | 0.204 | 0.434 | 0.362 | 0.097 | 0.108 | 0.332 | 738.7 | 15254 | 4066.0 | 103 | -16.09 | 0.248 | 0.658 | 0.446 | 0.430 | 0.320 | 0.250 | 0.158 | 0.553 | 0.289 | 0.624 | 0.875 | 0.803 | 0.483 | 0.492 | 36.1 | 203.300 | . Rockies 1508 | 3476 | 15610 | 14830 | 855 | 942 | 850 | 1370 | 2380 | 1812 | 815 | 0.272 | 389168 | 0.084 | 0.187 | 0.338 | 0.438 | 0.776 | 0.166 | 0.314 | 0.213 | 0.445 | 0.342 | 0.093 | 0.119 | 0.336 | 1105.9 | 15624 | 2791.8 | 89 | -30.66 | 0.268 | 0.678 | 0.467 | 0.383 | 0.345 | 0.272 | 0.170 | 0.548 | 0.282 | 0.622 | 0.860 | 0.790 | 0.487 | 0.503 | 18.7 | 139.590 | . Tigers 1534 | 3352 | 14538 | 13892 | 627 | 991 | 863 | 702 | 2535 | 1490 | 748 | 0.268 | 383018 | 0.078 | 0.180 | 0.329 | 0.426 | 0.756 | 0.159 | 0.305 | 0.208 | 0.427 | 0.365 | 0.095 | 0.106 | 0.328 | 365.6 | 14719 | 3559.2 | 100 | -36.02 | 0.281 | 0.688 | 0.475 | 0.415 | 0.322 | 0.263 | 0.157 | 0.551 | 0.292 | 0.633 | 0.871 | 0.797 | 0.477 | 0.506 | -124.7 | 177.960 | . Astros 1610 | 3378 | 14170 | 13475 | 743 | 1162 | 841 | 1147 | 2466 | 1963 | 831 | 0.258 | 381662 | 0.085 | 0.189 | 0.327 | 0.415 | 0.742 | 0.157 | 0.296 | 0.199 | 0.442 | 0.359 | 0.110 | 0.109 | 0.323 | -188.0 | 14169 | 3604.3 | 96 | -34.90 | 0.268 | 0.678 | 0.465 | 0.407 | 0.335 | 0.258 | 0.178 | 0.549 | 0.273 | 0.608 | 0.866 | 0.789 | 0.481 | 0.505 | -46.8 | 180.215 | . Royals 1449 | 2642 | 14022 | 13239 | 544 | 1075 | 907 | 788 | 2647 | 2090 | 773 | 0.267 | 376989 | 0.071 | 0.164 | 0.324 | 0.404 | 0.729 | 0.138 | 0.302 | 0.204 | 0.453 | 0.343 | 0.104 | 0.086 | 0.318 | -635.7 | 13644 | 2478.4 | 91 | 12.42 | 0.284 | 0.671 | 0.471 | 0.395 | 0.334 | 0.271 | 0.174 | 0.559 | 0.267 | 0.659 | 0.885 | 0.815 | 0.482 | 0.504 | -14.9 | 123.920 | . Angels 1725 | 3192 | 14678 | 13953 | 733 | 1036 | 931 | 765 | 2499 | 2224 | 914 | 0.266 | 378476 | 0.079 | 0.166 | 0.329 | 0.416 | 0.745 | 0.150 | 0.298 | 0.197 | 0.446 | 0.356 | 0.102 | 0.100 | 0.324 | -36.6 | 14286 | 4157.6 | 100 | 11.80 | 0.276 | 0.660 | 0.461 | 0.410 | 0.332 | 0.258 | 0.167 | 0.561 | 0.271 | 0.640 | 0.886 | 0.809 | 0.481 | 0.502 | 4.2 | 207.880 | . Dodgers 1743 | 3086 | 13867 | 13193 | 888 | 1078 | 808 | 1207 | 2454 | 1930 | 799 | 0.259 | 385848 | 0.087 | 0.179 | 0.329 | 0.406 | 0.735 | 0.147 | 0.296 | 0.208 | 0.451 | 0.341 | 0.098 | 0.102 | 0.321 | -477.5 | 13878 | 4128.4 | 97 | -28.13 | 0.260 | 0.660 | 0.454 | 0.390 | 0.340 | 0.271 | 0.172 | 0.557 | 0.272 | 0.631 | 0.878 | 0.805 | 0.484 | 0.497 | -14.8 | 206.420 | . Marlins 1516 | 2923 | 13492 | 12791 | 855 | 1136 | 817 | 1219 | 2337 | 1992 | 795 | 0.259 | 385900 | 0.081 | 0.195 | 0.325 | 0.404 | 0.728 | 0.145 | 0.303 | 0.204 | 0.456 | 0.339 | 0.107 | 0.104 | 0.318 | -754.3 | 13561 | 3436.8 | 93 | -21.31 | 0.270 | 0.653 | 0.455 | 0.394 | 0.336 | 0.269 | 0.182 | 0.542 | 0.276 | 0.610 | 0.868 | 0.789 | 0.483 | 0.501 | 47.6 | 171.840 | . Brewers 1528 | 3500 | 13911 | 13287 | 804 | 1268 | 777 | 1210 | 2393 | 1983 | 746 | 0.255 | 383632 | 0.085 | 0.202 | 0.325 | 0.417 | 0.742 | 0.161 | 0.298 | 0.198 | 0.448 | 0.354 | 0.100 | 0.121 | 0.323 | -263.0 | 14062 | 3447.1 | 94 | -24.62 | 0.273 | 0.666 | 0.461 | 0.392 | 0.339 | 0.269 | 0.173 | 0.535 | 0.292 | 0.605 | 0.856 | 0.778 | 0.478 | 0.503 | -53.9 | 172.355 | . Twins 1582 | 2853 | 14309 | 13534 | 675 | 943 | 905 | 651 | 2558 | 1865 | 793 | 0.264 | 389028 | 0.083 | 0.177 | 0.329 | 0.409 | 0.738 | 0.145 | 0.302 | 0.201 | 0.459 | 0.340 | 0.101 | 0.100 | 0.322 | -246.5 | 14126 | 3138.0 | 95 | 4.13 | 0.267 | 0.651 | 0.451 | 0.402 | 0.332 | 0.267 | 0.165 | 0.562 | 0.273 | 0.643 | 0.879 | 0.806 | 0.480 | 0.499 | 29.8 | 156.900 | . Mets 1630 | 3122 | 13739 | 13087 | 954 | 1028 | 833 | 1213 | 2372 | 2035 | 717 | 0.255 | 388091 | 0.087 | 0.182 | 0.326 | 0.404 | 0.729 | 0.149 | 0.292 | 0.206 | 0.435 | 0.359 | 0.103 | 0.102 | 0.318 | -709.1 | 13658 | 3749.8 | 95 | -25.00 | 0.259 | 0.659 | 0.452 | 0.401 | 0.335 | 0.264 | 0.177 | 0.546 | 0.277 | 0.639 | 0.874 | 0.804 | 0.483 | 0.498 | 68.2 | 187.490 | . Yankees 1895 | 4049 | 16169 | 15498 | 678 | 1278 | 902 | 551 | 2559 | 2045 | 665 | 0.268 | 399336 | 0.095 | 0.175 | 0.344 | 0.440 | 0.784 | 0.172 | 0.298 | 0.199 | 0.444 | 0.357 | 0.100 | 0.132 | 0.341 | 1665.6 | 16277 | 4658.4 | 108 | -12.98 | 0.247 | 0.660 | 0.442 | 0.425 | 0.325 | 0.251 | 0.170 | 0.538 | 0.292 | 0.630 | 0.882 | 0.808 | 0.472 | 0.487 | 63.0 | 232.920 | . Athletics 1696 | 3378 | 14646 | 13953 | 556 | 1017 | 877 | 466 | 2520 | 1433 | 516 | 0.254 | 396530 | 0.093 | 0.178 | 0.329 | 0.410 | 0.739 | 0.156 | 0.288 | 0.203 | 0.412 | 0.385 | 0.109 | 0.097 | 0.323 | -98.0 | 14369 | 3511.6 | 99 | 6.32 | 0.242 | 0.648 | 0.438 | 0.407 | 0.335 | 0.258 | 0.165 | 0.564 | 0.272 | 0.641 | 0.876 | 0.809 | 0.483 | 0.491 | 38.8 | 175.580 | . Phillies 1628 | 3316 | 14382 | 13685 | 981 | 1142 | 784 | 1120 | 2235 | 2026 | 571 | 0.257 | 393597 | 0.089 | 0.188 | 0.329 | 0.414 | 0.743 | 0.157 | 0.296 | 0.208 | 0.439 | 0.353 | 0.102 | 0.113 | 0.323 | -178.9 | 14323 | 4170.0 | 94 | -18.03 | 0.261 | 0.652 | 0.448 | 0.411 | 0.340 | 0.248 | 0.176 | 0.535 | 0.289 | 0.613 | 0.874 | 0.794 | 0.479 | 0.493 | 149.4 | 208.500 | . Pirates 1469 | 2881 | 13294 | 12680 | 771 | 1351 | 789 | 1203 | 2319 | 1644 | 784 | 0.255 | 384738 | 0.080 | 0.192 | 0.322 | 0.398 | 0.720 | 0.144 | 0.297 | 0.202 | 0.450 | 0.347 | 0.098 | 0.097 | 0.315 | -1057.9 | 13221 | 2682.5 | 90 | -22.17 | 0.272 | 0.663 | 0.461 | 0.407 | 0.336 | 0.257 | 0.175 | 0.556 | 0.269 | 0.625 | 0.866 | 0.793 | 0.483 | 0.506 | -52.1 | 134.125 | . Padres 1544 | 2801 | 13041 | 12372 | 739 | 924 | 831 | 1036 | 2274 | 2020 | 749 | 0.248 | 383066 | 0.088 | 0.198 | 0.319 | 0.387 | 0.706 | 0.139 | 0.293 | 0.203 | 0.446 | 0.351 | 0.099 | 0.095 | 0.309 | -1536.0 | 12738 | 3298.5 | 92 | -11.27 | 0.262 | 0.669 | 0.457 | 0.402 | 0.336 | 0.262 | 0.174 | 0.552 | 0.275 | 0.597 | 0.865 | 0.785 | 0.481 | 0.502 | 79.4 | 164.925 | . Giants 1701 | 2930 | 13941 | 13240 | 1118 | 933 | 907 | 1274 | 2534 | 1502 | 678 | 0.261 | 374429 | 0.085 | 0.171 | 0.329 | 0.409 | 0.738 | 0.148 | 0.297 | 0.200 | 0.450 | 0.350 | 0.105 | 0.089 | 0.321 | -413.5 | 13986 | 4319.2 | 97 | 8.36 | 0.277 | 0.685 | 0.471 | 0.401 | 0.344 | 0.256 | 0.172 | 0.560 | 0.268 | 0.642 | 0.877 | 0.805 | 0.477 | 0.503 | -81.9 | 215.960 | . Mariners 1593 | 3144 | 13935 | 13239 | 724 | 988 | 850 | 738 | 2345 | 2021 | 758 | 0.260 | 382667 | 0.081 | 0.181 | 0.324 | 0.405 | 0.729 | 0.145 | 0.296 | 0.198 | 0.450 | 0.352 | 0.106 | 0.099 | 0.318 | -592.2 | 13758 | 3641.4 | 98 | -0.53 | 0.268 | 0.669 | 0.461 | 0.401 | 0.330 | 0.269 | 0.172 | 0.555 | 0.272 | 0.626 | 0.874 | 0.799 | 0.481 | 0.494 | -25.7 | 182.070 | . Cardinals 1791 | 3370 | 14945 | 14208 | 1030 | 1195 | 892 | 1321 | 2570 | 1477 | 703 | 0.267 | 383806 | 0.087 | 0.175 | 0.337 | 0.423 | 0.760 | 0.156 | 0.302 | 0.208 | 0.448 | 0.344 | 0.097 | 0.109 | 0.330 | 495.4 | 14960 | 4976.8 | 102 | -3.19 | 0.264 | 0.678 | 0.464 | 0.399 | 0.334 | 0.267 | 0.167 | 0.551 | 0.282 | 0.633 | 0.879 | 0.807 | 0.483 | 0.502 | -5.8 | 248.840 | . Devil Rays 1500 | 3212 | 13843 | 13201 | 555 | 1151 | 877 | 627 | 2283 | 2273 | 886 | 0.256 | 384208 | 0.085 | 0.193 | 0.324 | 0.408 | 0.733 | 0.153 | 0.296 | 0.197 | 0.437 | 0.367 | 0.109 | 0.108 | 0.320 | -423.4 | 13863 | 3617.1 | 97 | -33.15 | 0.263 | 0.677 | 0.462 | 0.426 | 0.325 | 0.250 | 0.166 | 0.554 | 0.279 | 0.611 | 0.856 | 0.784 | 0.480 | 0.505 | 114.3 | 180.855 | . Rangers 1657 | 3936 | 15800 | 15059 | 634 | 1106 | 934 | 679 | 2412 | 1864 | 727 | 0.269 | 390531 | 0.082 | 0.180 | 0.333 | 0.441 | 0.774 | 0.173 | 0.301 | 0.205 | 0.428 | 0.368 | 0.101 | 0.123 | 0.335 | 1093.6 | 15579 | 3840.1 | 100 | -17.39 | 0.270 | 0.670 | 0.462 | 0.411 | 0.334 | 0.255 | 0.161 | 0.545 | 0.294 | 0.616 | 0.868 | 0.791 | 0.479 | 0.499 | 110.4 | 192.005 | . Blue Jays 1631 | 3759 | 15048 | 14360 | 531 | 1148 | 893 | 513 | 2561 | 1596 | 606 | 0.261 | 388236 | 0.085 | 0.179 | 0.329 | 0.430 | 0.758 | 0.169 | 0.292 | 0.201 | 0.427 | 0.372 | 0.113 | 0.115 | 0.330 | 526.0 | 14935 | 3655.9 | 100 | -27.48 | 0.261 | 0.660 | 0.452 | 0.417 | 0.328 | 0.256 | 0.164 | 0.546 | 0.290 | 0.632 | 0.876 | 0.802 | 0.478 | 0.499 | -19.2 | 182.795 | . Expos 1548 | 3086 | 13503 | 12844 | 913 | 1023 | 803 | 1342 | 2413 | 1789 | 772 | 0.256 | 384744 | 0.084 | 0.189 | 0.323 | 0.406 | 0.729 | 0.150 | 0.295 | 0.199 | 0.459 | 0.342 | 0.100 | 0.109 | 0.318 | -767.6 | 13499 | 2881.4 | 91 | -13.59 | 0.271 | 0.655 | 0.454 | 0.394 | 0.340 | 0.266 | 0.174 | 0.550 | 0.276 | 0.623 | 0.868 | 0.791 | 0.476 | 0.504 | -36.5 | 144.070 | . Feature Columns . The feature columns are those we will use in the model. RAR_yr, wRC_plus, and OBP are the three with the highest correlation so will choose these. . feature_cols = bball_data[[&#39;RAR_yr&#39;, &#39;wRC_plus&#39;, &#39;OBP&#39;]] X = feature_cols y = bball_data.Wins . Model . Since these variables all seem to follow a strong linear model based on the plots above we will use a linear regression. sklearn provides us with the .LinearRegression function which we can use to fit a model on our data. It also provides us with a .score function that can be used to give us our R^2 value. Below the MSE is outputted followed by the R^2 . lr = LinearRegression() model = lr.fit(X, y) y_pred = lr.predict(X) print(metrics.mean_squared_error(y, y_pred)) lr.score(X,y) . 2318.0265554302555 . 0.7894083463992914 . Just based on this it is difficult to know how good an MSE of 2318 is, but .789 is a fairly good score. . This can be visualized through a scatter plot which appears to follow a fairly strong model. . scatter(y, y_pred, &quot;Linear Regression&quot;, &quot;Actual Values&quot;, &quot;Predicted Values&quot;) . An R^2 of .79 is strong, but there are other ways to try to improve on this. One way is to use the test_train_split function from sklearn where we can designate a certain percent of the data to train our model on and then we can test it on the rest. We can start by training on 30%. . Train on 30% . train(.30, 30, &quot;30% Test/Train Split&quot;, &quot;Actual Values&quot;,&quot;Predicted Values&quot;) . 1965.7520937078011 3763.911240693663 0.07033880633221809 . Testing on 30% of the data did gave us a worse score than before, 0.703 vs .789. Our training MSE is larger than the testing at 1966 vs 3764, so it is possible we are overfitting. The scatterplot gives us a better understanding as we see that testing on 30% of 30 data points is only 9 observations. This is most likely too few data points to be using. . Since 30% was too few data points testing on 50% may perform better. . Train on 50% . train(.50, 50,&quot;50% Test/Train Split&quot;, &quot;Actual Values&quot;,&quot;Predicted Values&quot;) . 2476.8300468675525 2684.228809055235 0.7883411898572972 . Our score of 0.788 is better than when testing on 30%, but it&#39;s slightly less than our original score. In this case we should try to use cross validation as this may work better for our small dataset. . Cross Validation . With a small dataset it is best to use Leave One Out Cross Validation meaning we use K splits where K is the number of rows in our data. We can then run K Cross Validation models using the train.test split method. Once all of these are run we can use the mean of the result. . There are 30 rows so we will use K=30 . kf = model_selection.KFold(n_splits=30, shuffle=True) . crossval(X,y) . ~~~~ SUMMARY OF CROSS VALIDATION ~~~~ Mean of R2 for all folds: 0.7875982862041571 . This result is almost the exact same as our original score when using only a linear regression (.788 vs.789). These scores are very close, but we are better off going with the score we found from our cross validation as this is less prone to overfitting. Having used only 3 variables to calculate this we could try to add another as usually 3-4 variables are used when creating a model. If we expand our cuttoff to 0.65 we could include BB_Pct as well. This is still a strong correlation and walks are one of the biggest statistics used by baseball statistian as well as a leading factor in driving the sabermetric movement. Bsed on this it would be a good variable to use if it can improve our model. . plotfunct(&#39;BB_Pct&#39;, &quot;Wins&quot;, bball_data) . feature_cols = bball_data[[&#39;RAR_yr&#39;, &#39;wRC_plus&#39;, &#39;OBP&#39;, &#39;BB_Pct&#39;]] X = feature_cols . crossval(X,y) . ~~~~ SUMMARY OF CROSS VALIDATION ~~~~ Mean of R2 for all folds: 0.8082798585522154 . Including BB_Pct did improve our model raising our R^2 value to .808, which is a very strong score. We can test it out on some data from this current year. . Using our Model . We can see how our model would predict teams to do so far in the 2018 season. Currently the Yankees and Red Sox have the best records in baseball and are always an exciting rivalry to watch. Below we can see how well they should be doing based on our model. . The Yankees and Red Sox values for RAR, RC_plus, OBP, and BB_Pct are as follows so far in 2018: . Yankees 125.8, 116, .331, .10 | Red Sox 118.7, 111, .329, .083 | . Since we used 20 years worth of data we need to divide the output by 20. Additionally the data we are using is only through 63 and 69 games respectively meaning the RAR values will need to be converted based on these values . prediction(X,y,30,125.8, 116, .331, .10, 162, 63, 63/162, &quot;Yankees&quot;) . Yankees: [39.12900386] . The Yankees currently have a 43-20 record, but according to the model should have a 39-24 record, which is not far off. . prediction(X,y,30, 118.7, 111, .329, .083, 162,69, 69/162, &quot;Red Sox&quot;) . Red Sox: [39.2737211] . The Red Sox currently have a 47-22 record, but should only have a 39-30 record accordig to our model. . Another way to use our model is to look at who will finish with the best record in baseball. The Yankees and Red Sox are contenders, but the Cubs, Astros, and Dodgers also favorites. Their statistics for RAR, RC_plus, OBP, and BB_Pct are as follow. . Cubs: 133.8 103 .339 .0903 | Astros: 130.6 114 .333 .089 | . prediction(X, y, 30, 125.8, 116, .331, .10, 162, 63, 1, &quot;Yankees&quot;) . Yankees: [100.83644452] . prediction(X, y, 30, 118.7, 111, .329, .083, 162, 69, 1, &quot;Red Sox&quot;) . Red Sox: [91.78849947] . prediction(X, y, 30, 133.8,103, .339, .0903, 162, 65, 1, &quot;Cubs&quot;) . Cubs: [97.38110863] . prediction(X, y, 30, 130.6, 114, .333, .089, 162, 70, 1, &quot;Astros&quot;) . Astros: [96.64541499] . Based on our model the top teams would finish as follows: . Yankees 101 Wins | Cubs 97 Wins | Astros 97 Wins | Red Sox 92 Wins | . Future Steps: . As you may have noticed, this algorithm only considers hitters statistics. In order to improve the model, pitching should be included as well. | WAR may be a good variable to include as well. It was not included in our dataset, but would probably be a strong predictor. | 30 data points may not have been enough. I could try to fix this by breaking up the teams wins and statistics by year and using that data in the model. | .",
            "url": "https://jssheehan.github.io/ws/baseball/sports/pandas/numpy/regression/cross%20validation/2018/07/15/MLB-Team-Predictions-Sheehan.html",
            "relUrl": "/baseball/sports/pandas/numpy/regression/cross%20validation/2018/07/15/MLB-Team-Predictions-Sheehan.html",
            "date": " • Jul 15, 2018"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "",
          "content": "Jerry Scott Sheehan Resume . jssheehan94@gmail.com | 14126 Marquesas Way, Apt 3208, Marina Del Rey 90292 | (703) 220-7649 . EXPERIENCE SUMMARY . I am a Data Scientist at Booz Allen Hamilton who brings five years of combined industry and government experience performing professional data and business analytics support services to a variety of Air Force and Army projects. More recently, I have managed analytical teams to drive business through data and strategy. . EDUCATION . Johns Hopkins University | Baltimore, MD | Graduated: May 2016 B.S. Applied Mathematics &amp; Statistics Minors: Entrepreneurship &amp; Management; Psychology . EXPERIENCE . Booz Allen Hamilton . Lead Data Scientist | Jul 2020-Present . Assist government clients in solving their most challenging technical problems by converting unstructured data into insights that can be used for budget and policy decisions. | Create dashboards to display complex analytical information to a non-technical audience in a manner that allows for user interaction and customization. | Managed a team of analysts to design and improve a manpower forecasting tool for multiple army organizations. Collected, analyzed, and fed data into linear regression and agent-based models to forecast future workload for each organization. Based on internal analysis and feedback from stakeholders, added supplementary features, graphs, and tables to the dashboard used to display the models forecasts. | . Data Scientist | Oct 2017 – Jun 2020 . Analyzed survey results using Python and advanced statistical techniques such as Mann-Whitney U tests to understand the culture of PTSD in the Air Force. Displayed the results through multiple forms of data visualizations and drew conclusions that were written so that a non-technical audience could understand. | Performed task automation, moving manual processes into scripts in Power Queries, VBA, or Python. For one project reduced the process from 8 hours to 16 seconds, opening the opportunity for additional metrics to be captured. | . Beghou Consulting . Associate Consultant | Sept 2016- Sept 2017 . Served multiple healthcare clients by providing data-driven business and marketing solutions. Routinely designed processes to manage and consolidate large unstructured datasets in SAS, while pulling key insights on sales history. | Worked with clients to optimize their sales team’s workload and performance through predictive modeling using mapping and data visualization software tools to value each representative’s territories and physicians. | . Impact Baseball Baltimore . Director, Operations and Data Analysis | Jun 2014-Jun 2016 . Worked on the business side of the baseball training program. Designed and analyzed a Master Database to consolidate information collected on athletes. Through SQL and Excel, used this database to lead multiple business and marketing projects, including designing promotional roll-out schedules, analyzing revenue streams, and optimizing program sizes. | Implemented a Customer Relationship Management (CRM) system by designing an automated process linking the Master Database to multiple data sources. The CRM was used to assist in maintaining relationships with athletes. | . Johns Hopkins University Psychology Department . Research Analyst | Sept 2014-May 2016 . Ran and implemented studies for the Attention and Perception lab | Designed study in Matlab with the intention of training participants to ignore distractions in order to complete tasks as quickly as possible. The goal being to create a training course for airport security that would teach staff to identify objects in luggage that may cause security threats in a more efficient manner. | Analyzed results using ANOVA in RStudio to compare the times of participants before and after training to determine if there was a significant difference. | . Big Train Baseball . Statistical Analyst | Summers 2012, 2014 . Worked for the championship winning team, Bethesda Big Train, in the Cal Ripken Collegiate Baseball League. | Recorded and monitored statistics for college prospects such as Hunter Renfroe and Brandon Lowe. | Made in-game scoring decisions, tracked each play to load into the online box score, and provided detailed statistics to be used in the post-game write-up. | . Johns Hopkins News-Letter . Sportswriter | Sept 2013 – May 2014 . Writer for the sports section of the Johns Hopkins New-Letter. | Wrote weekly articles covering player and team performances through interviews and game statistics. | Selected the athlete of the week based on the statistics of the top individual performer across all sports. | . Johns Hopkins University Baseball Team . Statistician | Feb – May 2013 . Worked in the front office of the Johns Hopkins Athletics Baseball Department | As the lone member of the analytics team, was responsible for compiling and tracking player statistics and making in game scoring decisions on plays such as errors and wild pitches. | . KEY SKILLS AND PROGRAMMING LANGUAGES . Microsoft Office – Access, Excel (VBA, Power Queries) | Data Visualization, Analysis, and Management | Written and Oral Communication (including communication of data and analytical results) | Python – Pandas, NumPy, SciPy, Plotly, Scikit Learn | SQL | Machine Learning – Regression, Classification, Clustering, Neural Networks | Git, GitHub | R, RStudio | SAS | . NON-PROGRAMMING LANGUAGES . French: fluent in both oral and written communication | Spanish: 4 years of lessons | .",
          "url": "https://jssheehan.github.io/ws/resume/",
          "relUrl": "/resume/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "I am a data scientist with five years of professional experience in data science with a passion for baseball analytics. I graduated in 2016 from Johns Hopkins University with a Bachelors of Science in Applied Mathematics and Statistics. While pursuing my degree I headed the data and business operations for the baseball training program Impact Baseball Baltimore and worked for the Johns Hopkins Baseball team and Cal Ripken Summer League. After graduating I have worked on improving my data science skills at Booz Allen Hamilton where I work for the Aerospace account to address their most pressing and challenging data needs. These projects include creating predictive models, visualizing data through dashboards, and analyzing survey results to draw key insights. . While not at work I spend most of my time pooring through baseball statistics and watching baseball games. On this site I include side projects where I seek to use and improve my data science skills and apply them to baseball. . If you like what you see, have questions on any analysis, or just want to talk baseball please email me at jssheehan94@gmail.com. If you would like to view my gitHub page please visit: **[JSSheehan](https://github.com/JSSheehan)** For more information on me and my experience please see my **[Resume](https://jssheehan.github.io/ws/resume/)** . .",
          "url": "https://jssheehan.github.io/ws/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jssheehan.github.io/ws/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}